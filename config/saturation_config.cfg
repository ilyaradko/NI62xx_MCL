#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#         the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
    halfwaveplate:
        module.Class: 'aptmotor.APTStage'
        dll_path: 'C:\\Program Files\\Thorlabs\\APT\\APT Server\\APT.dll'
        axis_labels:
            - phi
        phi:
            hw_type: 'K10CR1'
            serial_num: 55000038
            pitch: 0.00
            unit: 'degree'
            constraints:
                pos_min: -360
                pos_max: 360
                vel_min: 0.01
                vel_max: 10.0
                acc_min: 4.0
                acc_max: 10.0

    quarterwaveplate:
        module.Class: 'aptmotor.APTStage'
        dll_path: 'C:\\Program Files\\Thorlabs\\APT\\APT Server\\APT.dll'
        axis_labels:
            - phi
        phi:
            hw_type: 'TDC001'
            serial_num: 83839446
            pitch: 0.00
            unit: 'degree'
            constraints:
                pos_min: -360
                pos_max: 360
                vel_min: 0.05
                vel_max: 10.0
                acc_min: 6.0
                acc_max: 10.0

    ni_digital_switch:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        channel: '/Dev1/port0/line1:2'  # optional
        name: ''  # optional
        switch_time: 0.1
        remember_states: False  # optional
        switches:
            APD1: ['off', 'on']
            APD2: ['off', 'on']

    ni6323:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        clock_channel: '/Dev1/Ctr0'
        counter_channels: ['/Dev1/Ctr1', '/Dev1/Ctr3']
        scanner_clock_channel: '/Dev1/Ctr2'
        scanner_counter_channels: ['/Dev1/Ctr3', '/Dev1/Ctr1']
        photon_sources: ['/Dev1/PFI13', '/Dev1/PFI10']
        counting_edge_rising: True
        gate_in_channel: '/Dev1/PFI9'
        odmr_trigger_channel: '/Dev1/PFI12'
        scanner_position_ranges: [[0, 200e-6], [0, 200e-6], [0, 50e-6]]
        scanner_voltage_ranges: [[0, 10], [0, 10], [0, 10]]
        scanner_ao_channels: ['/Dev1/AO0', '/Dev1/AO1', '/Dev1/AO2']
        default_clock_frequency: 100
        default_scanner_clock_frequency: 200
        default_samples_number: 10

    ni_aom_sweep:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        scanner_clock_channel: '/Dev1/Ctr2'
        scanner_counter_channels: ['/Dev1/Ctr3']
        photon_sources: ['/Dev1/PFI13']
        counting_edge_rising: True
        scanner_ao_channels: ['/Dev1/AO3']
        # AOM drive voltage ranges. Must be a 2D array!
        scanner_voltage_ranges: [[0, 5]]
        default_scanner_clock_frequency: 10
        # ---------------------------------
        # Variables that have to be defined for NationalInstrumentsXSeries to work,
        # but are not used and will be ignored:
        clock_channel: '/Dev1/Ctr0'
        counter_channels: ['/Dev1/Ctr1']
        gate_in_channel: '/Dev1/PFI9'
        odmr_trigger_channel: '/Dev1/PFI12'
        scanner_position_ranges: [[0, 200e-6]]

    ni6221:
        module.Class: 'national_instruments_m_series.NationalInstrumentsMSeries'
        clock_channel: '/Dev1/Ctr1'
        counter_channels: ['/Dev1/Ctr0']
        scanner_clock_channel: '/Dev1/PFI9'
        scanner_counter_channels: ['/Dev1/Ctr0']
        photon_sources: ['/Dev1/PFI8', '/Dev1/PFI3']
        counting_edge_rising: True
        gate_in_channel: '/Dev1/PFI9'
        odmr_trigger_channel: '/Dev1/PFI12'
        scanner_position_ranges: [[0, 200e-6], [0, 200e-6], [0, 50e-6]]
        default_clock_frequency: 100
        # Valid frequencies for MCL stage: 200, 250, 500, and 1000 Hz
        default_scanner_clock_frequency: 200
        default_samples_number: 10
        connect:
            scannerclock: 'mclpiezo'

    nicard_instreamer:
        module.Class: 'ni_x_series_in_streamer.NIXSeriesInStreamer'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI13'
            - 'PFI10'
        #analog_sources:  # optional
        #    - 'ai0'
        #    - 'ai1'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        #adc_voltage_range: [-10, 10]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional

    nicard_instreamer2:
        module.Class: 'ni_x_series_in_streamer.NIXSeriesInStreamer'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI13'
            - 'PFI10'
        #analog_sources:  # optional
        #    - 'ai0'
        #    - 'ai1'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        #adc_voltage_range: [-10, 10]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional

    mclpiezo:
        module.Class: 'mcl.mcl_scanner.MCLScanner'
        # Valid frequencies for MCL stage: 200, 250, 500, and 1000 Hz
        defaul_scanner_clock_frequency: 200

    mw_source_synthhd:
        module.Class: 'microwave.mw_source_windfreak_synthhdpro.MicrowaveSynthHDPro'
#       serial_port: 'COM4'
        serial_port: 'COM3'
        serial_timeout: 10 # in seconds
        output_channel: 1  # either 0 or 1

    pulsebluster:
        module.Class: 'spincore.pulse_blaster_esrpro.PulseBlasterESRPRO'

    andor:
        module.Class: 'spectrometer.andor.Andor'
        remote: 'rpyc://10.54.11.250:505/andor'

    shamrock:
        module.Class: 'spectrometer.shamrock.Shamrock'
        remote: 'rpyc://10.54.11.250:505/shamrock'

    mynicounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        clock_channel: '/Dev1/Ctr1'
        clock_frequency: 100
        counter_channel: '/Dev1/Ctr0'
        photon_source: '/Dev1/PFI13'
        count_distribution: 'dark_bright_poisson'
        remoteaccess: True

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'

    keysightscope:
        module.Class: 'scope_keysight3024T.Scope3024T'

logic:
    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        watchdog_interval: 1
        autostart_watchdog: True
        connect:
            switch: 'switchinterfuse'

    switchinterfuse:
        module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
        connect:
            switch1: 'ni_digital_switch'
        extend_hardware_name: True

    power_scanner_logic:
        module.Class: 'power_scanner_logic.PowerScannerLogic'
        connect:
            savelogic: 'savelogic'
            confocalscanner1: 'ni6323'

    power_stabilization_logic:
        module.Class: 'power_stabilization_logic.PowerStabilizationLogic'
        connect:
            confocalscanner1: 'ni6323'
            powermeter1: 'powermeter'

    laser_scanner_logic:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            savelogic: 'savelogic'
            confocalscanner1: 'ni6323'

    ctl_toptica_logic:
        module.Class: 'ctl_toptica_logic.TopticaDLCproLogic'
        connect:
            savelogic: 'savelogic'
            laser: 'ctltoptica'

    ctl_toptica_test_logic:
        module.Class: 'ctl_toptica_logic.TopticaDLCproLogic'
        connect:
            savelogic: 'savelogic'
            laser: 'ctltopticadummy'

    high_finesse_logic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        connect:
            wavemeter1: 'highfinesse'
            savelogic: 'savelogic'
            counterlogic: 'counterlogic'
            fitlogic: 'fitlogic'

    andor_spectrometer:
        module.Class: 'interfuse.andor_spectrometer_interfuse.AndorSpectrometerInterfuse'
        connect:
            andor_cam: 'andor'
            shamrock_spectrometer: 'shamrock'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'ni6323'
            savelogic: 'savelogic'

    timeserieslogic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        max_frame_rate: 20
        connect:
            _streamer_con: 'nicard_instreamer'
            _savelogic_con: 'savelogic'

    timeserieslogic2:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        max_frame_rate: 20
        connect:
            _streamer_con: 'nicard_instreamer2'
            _savelogic_con: 'savelogic'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
#           odmrcounter: 'ni6221'
#           odmrcounter: 'mydummyodmrcounter'
            odmrcounter: 'odmr_counter_microwave_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'odmr_counter_microwave_interfuse'
#           microwave1: 'microwave_dummy'
#           microwave1: 'mw_source_synthhd'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'

    # This interfuse enables ODMR if hardware trigger is not available,
    # or if the counter has only two channels:
    odmr_counter_microwave_interfuse:
        module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
        connect:
            #slowcounter: 'ni6221'
            slowcounter: 'ni6323'
            microwave: 'mw_source_synthhd'

    scannerlogic_dummy:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse_dummy'
            savelogic: 'savelogic'

    spectroscannerlogic:
        module.Class: 'spectro_confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'
            andorcamera: 'andor'
            shamrock: 'shamrock'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            #confocalscanner1: 'ni6221'
            confocalscanner1: 'ni6323'

    scanner_tilt_interfuse_dummy:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'mydummyscanner'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    optimizerlogic_dummy:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse_dummy'
            fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'savelogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
        #        needsmodules:
        #            optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    saturationlogic:
        module.Class: 'saturation_logic.SaturationLogic'
        connect:
            scanner1: 'ni_aom_sweep'
            #powermeter: 'ThorlabsDetector'
            savelogic: 'savelogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: True
        save_png: True

    motorizedstagelogic:
        module.Class: 'motorized_stage_logic.MotorizedStageLogic'
        connect:
            counter1: 'ni6323'
            quarterwaveplate: 'quarterwaveplate'
            halfwaveplate: 'halfwaveplate'
            savelogic: 'savelogic'

gui:
    Switch_board:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'

    Counter_(timeseries):
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        connect:
            _time_series_logic_con: 'timeserieslogic'

    Counter2_(timeseries):
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        connect:
            _time_series_logic_con: 'timeserieslogic2'

    Confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    saturation:
        module.Class: 'saturation.saturationgui.SaturationGui'
        connect:
            saturationlogic1: 'saturationlogic'
            savelogic: 'savelogic'

    ODMR:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    Counter_(old):
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal_dummy:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic_dummy'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic_dummy'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    laserscannergui:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            savelogic: 'savelogic'
            voltagescannerlogic1: 'laser_scanner_logic'

    powerscannergui:
        module.Class: 'powerscanner.powerscannergui.VoltScanGui'
        connect:
            savelogic: 'savelogic'
            voltagescannerlogic1: 'power_scanner_logic'

    powerstabilizationgui:
        module.Class: 'laserpowercontrol.laserpowercontrol_gui.PowerStabilizationGui'
        connect:
            power_stabilization_logic: 'power_stabilization_logic'

    #ctltopticagui:
    #    module.Class: 'ctltoptica.ctltoptica_gui.LaserGUI'
    #    connect:
    #        savelogic: 'savelogic'
    #        laserlogic: 'ctl_toptica_logic'

    #ctltopticatestgui:
    #    module.Class: 'ctltoptica.ctltoptica_gui.LaserGUI'
    #    connect:
    #        savelogic: 'savelogic'
    #        laserlogic: 'ctl_toptica_test_logic'

    wavemeterloggui:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'high_finesse_logic'
            savelogic: 'savelogic'

    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

